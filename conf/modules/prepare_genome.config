/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
        ext.when   = When to run the module.
----------------------------------------------------------------------------------------
*/

// PREPARE_GENOME

process {

    withName: 'BWAMEM1_INDEX' {
        ext.when         = { !params.bwa && params.step == "alignment" && (params.aligner == "bwa-mem")}
        publishDir       = [
            enabled: (params.save_reference || params.build_only_index),
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/Reference" },
            pattern: "bwa"
        ]
    }

    withName: 'BWAMEM2_INDEX' {
        ext.when         = { !params.bwamem2 && params.step == "alignment" && params.aligner == "bwa-mem2" }
        publishDir       = [
            enabled: (params.save_reference || params.build_only_index),
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/Reference" },
            pattern: "bwamem2"
        ]
    }

    withName: 'GATK4_CREATESEQUENCEDICTIONARY' {
        ext.when         = { !params.dict && params.step != "annotate" && params.step != "controlfreec" }
        publishDir       = [
            enabled: (params.save_reference || params.build_only_index),
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/Reference/dict" },
            pattern: "*dict"
        ]
    }

    withName: 'SAMTOOLS_FAIDX' {
        ext.when         = { !params.fasta_fai && params.step != "annotate" }
        publishDir       = [
            enabled: (params.save_reference || params.build_only_index),
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/Reference/fai" },
            pattern: "*fai"
        ]
    }


    withName: 'TABIX_DBSNP' {
        ext.when         = { !params.dbsnp_tbi && params.dbsnp && ((params.step == "alignment" || params.step == "markduplicates" || params.step == "prepare_recalibration") || params.tools && (params.tools.split(',').contains('controlfreec') || params.tools.split(',').contains('haplotypecaller') || params.tools.split(',').contains('mutect2'))) }
        publishDir       = [
            enabled: (params.save_reference || params.build_only_index),
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/Reference/dbsnp" },
            pattern: "*vcf.gz.tbi"
        ]
    }

    withName: 'TABIX_GERMLINE_RESOURCE' {
        ext.when         = { !params.germline_resource_tbi && params.germline_resource && params.tools && params.tools.split(',').contains('mutect2') }
        publishDir       = [
            enabled: (params.save_reference || params.build_only_index),
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/Reference/germline_resource" },
            pattern: "*vcf.gz.tbi"
        ]
    }

    withName: 'TABIX_KNOWN_INDELS' {
        ext.when         = { !params.known_indels_tbi && params.known_indels && (params.step == 'alignment' || params.step == "markduplicates" || params.step == 'prepare_recalibration' || (params.tools && (params.tools.split(',').contains('haplotypecaller'))) ) }
        publishDir       = [
            enabled: (params.save_reference || params.build_only_index),
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/Reference/known_indels" },
            pattern: "*vcf.gz.tbi"
        ]
    }

    withName: 'TABIX_KNOWN_SNPS' {
        ext.when         = { !params.known_snps_tbi && params.known_snps && (params.step == 'alignment' || params.step == "markduplicates" || params.step == 'prepare_recalibration' || (params.tools && (params.tools.split(',').contains('haplotypecaller'))) ) }
        publishDir       = [
            enabled: (params.save_reference || params.build_only_index),
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/Reference/known_snps" },
            pattern: "*vcf.gz.tbi"
        ]
    }

    withName: 'TABIX_PON' {
        ext.when         = { !params.pon_tbi && params.pon && params.tools && params.tools.split(',').contains('mutect2') }
        publishDir       = [
            enabled: (params.save_reference || params.build_only_index),
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/Reference/pon" },
            pattern: "*vcf.gz.tbi"
        ]
    }

    withName: 'UNZIP_ALLELES|UNZIP_LOCI|UNZIP_GC|UNZIP_RT' {
        ext.when         = { params.tools && params.tools.split(',').contains('ascat')}
        publishDir       = [
            enabled: false
        ]
    }

    withName: 'UNTAR_CHR_DIR' {
        ext.when         = { params.tools && params.tools.split(',').contains('controlfreec')}
    }
}







